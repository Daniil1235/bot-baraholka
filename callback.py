import sqlite3
import main
import os
import random
import display
import utils
import config

bot = main.bot
types = main.types

id = ""
name = ""


def m(callback: types.CallbackQuery):
    global id
    global name
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    if "change" in callback.data:
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        for i in items:
            if callback.data == f"change {i[0]}":
                id = i[0]
                name = i[2]
                bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
                bot.register_next_step_handler(callback.message, change)

    elif "price" in callback.data:
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        for i in items:
            if callback.data == f"price {i[0]}":
                id = i[0]
                bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")
                bot.register_next_step_handler(callback.message, price)

    elif "delete" in callback.data:
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        for i in items:
            if callback.data == f"delete {i[0]}":
                id = i[0]
                bot.send_message(callback.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ yes , –¥–ª—è –æ—Ç–º–µ–Ω—ã - no")
                bot.register_next_step_handler(callback.message, delete)

    elif "deluser" in callback.data:
        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        for i in users:
            if callback.data == f"deluser {i[0]}":
                id = i[1]
                bot.send_message(callback.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ yes , –¥–ª—è –æ—Ç–º–µ–Ω—ã - no")
                bot.register_next_step_handler(callback.message, deluser)

    elif callback.data == "random":
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        if not items:
            bot.send_message(callback.message.chat.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π‚òπÔ∏è")
            return None
        i = random.choice(items)
        photo = open(f"photos/{i[1]} - {i[2]}.png", "rb")
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("üõí—Ö–æ—á—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data=f"buy {i[0]}")
        btn2 = types.InlineKeyboardButton("üé≤–µ—â—ë", callback_data="random")
        markup.row(btn1, btn2)

        bot.send_photo(callback.message.chat.id, photo, caption=f"{i[2]} \n"
                                                                f"–¶–µ–Ω–∞ : {i[4]} \n"
                                                                f"{i[3]}", reply_markup=markup)

    elif "buy" in callback.data:
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        for i in items:
            if callback.data == f"buy {i[0]}":
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚úÖ–¥–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"request {i[1]} - {i[2]}"))
                bot.send_message(callback.message.chat.id, "—á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º ,–Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∑–∞–ø—Ä–æ—Å. –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=markup)

    elif callback.data == "right":
        cursor.execute(f'SELECT page_number FROM users WHERE tg = "{callback.message.chat.id}"')
        page_number = cursor.fetchall()[0][0]
        cursor.execute(f'UPDATE users SET page_number = "{page_number + 1}" WHERE tg = "{callback.message.chat.id}"')
        connection.commit()
        cursor.execute(f'SELECT data_list FROM users WHERE tg = "{callback.message.chat.id}"')
        data_list = eval(cursor.fetchall()[0][0])
        display.edit_data(callback.message, data_list=data_list, page_number=page_number + 1)

    elif callback.data == "left":
        cursor.execute(f'SELECT page_number FROM users WHERE tg = "{callback.message.chat.id}"')
        page_number = cursor.fetchall()[0][0]
        cursor.execute(f'UPDATE users SET page_number = "{page_number - 1}" WHERE tg = "{callback.message.chat.id}"')
        connection.commit()
        cursor.execute(f'SELECT data_list FROM users WHERE tg = "{callback.message.chat.id}"')
        data_list = eval(cursor.fetchall()[0][0])
        display.edit_data(callback.message, data_list=data_list, page_number=page_number - 1)


    elif "get" in callback.data:
        cursor.execute('SELECT * FROM items')
        items = cursor.fetchall()
        message = callback.message
        for i in items:
            if callback.data == f"get {i[2]}":
                if i[1] == str(message.chat.id):
                    photo = open(f"photos/{message.chat.id} - {i[2]}.png", "rb")
                    markup = types.InlineKeyboardMarkup()
                    btn1 = types.InlineKeyboardButton("‚úèÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                                                      callback_data=f"change {i[0]}")
                    btn2 = types.InlineKeyboardButton("üí≤–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",
                                                      callback_data=f"price {i[0]}")
                    btn3 = types.InlineKeyboardButton("‚ùå—É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                                                      callback_data=f"delete {i[0]}")
                    markup.row(btn1, btn2, btn3)

                    bot.send_photo(message.chat.id, photo, caption=f"{i[2]} \n"
                                                                   f"–¶–µ–Ω–∞ : {i[4]} \n"
                                                                   f"{i[3]}", reply_markup=markup)
    elif "update" in callback.data:
        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        for i in users:
            if callback.data == f"update {i[0]}":
                id = i[0]
                bot.send_message(callback.message.chat.id, "–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É")

    elif callback.data == "eval":
        bot.send_message(callback.message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–û—Å—Ç–æ—Ä–æ–∂–Ω–æ ! –ü—Ä—è–º–π –¥–æ—Å—Ç—É–ø –∫ —Ö–æ—Å—Ç–∏–Ω–≥—É!")
        bot.register_next_step_handler(callback.message, evall)

    elif callback.data == "exec":
        bot.send_message(callback.message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–û—Å—Ç–æ—Ä–æ–∂–Ω–æ ! –ü—Ä—è–º–π –¥–æ—Å—Ç—É–ø –∫ —Ö–æ—Å—Ç–∏–Ω–≥—É!")
        bot.register_next_step_handler(callback.message, execc)

    elif callback.data == "ban":
        bot.send_message(callback.message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ tg id")
        bot.register_next_step_handler(callback.message, bann)

    elif callback.data == "unban":
        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        for i in users:
            if i[1] == str(callback.message.chat.id):
                cursor.execute(f'UPDATE users SET banned = "{0}" WHERE tg = "{i[1]}"')
                cursor.execute(f'UPDATE users SET unban_data = "{0}" WHERE tg = "{i[1]}"')
                bot.send_message(callback.message.chat.id, "—É—Å–ø–µ—à–Ω–æ")

    elif "request" in callback.data:
        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        for i in users:
            if i[1] in callback.data:
                markup = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton("‚úÖ—Ä–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow {callback.message.chat.id}")
                btn2 = types.InlineKeyboardButton("‚ùå–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"deny {callback.message.chat.id}")
                markup.row(btn1, btn2)
                bot.send_message(i[1], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \"{callback.message.chat.first_name}\" –•–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è \"{callback.data.split(' ')[3]}\"", reply_markup=markup)
                bot.send_message(callback.message.chat.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")
                bot.edit_message_reply_markup(callback.message.chat.id, callback.message.id, reply_markup=None)

    elif "allow" in callback.data:
        bot.send_message(callback.data.split(" ")[1], f"–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ–¥–≤–∞—Ü–∞: @{callback.message.chat.username}")
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.id, reply_markup=None)
        bot.send_message(callback.message.chat.id, "‚úÖ–∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")

    elif "deny" in callback.data:
        bot.send_message(callback.data.split(" ")[1], f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.id, reply_markup=None)
        bot.send_message(callback.message.chat.id, "‚ùå–∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    elif callback.data == "free":
        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        for i in users:
            if i[1] == str(callback.message.chat.id):
                if i[2] != 0:
                    markup = types.InlineKeyboardMarkup()
                    btn1 = types.InlineKeyboardButton("–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ", switch_inline_query_current_chat="FREE")
                    btn2 = types.InlineKeyboardButton("–¥–æ–≥–æ–≤–æ—Ä–Ω—ã–µ", switch_inline_query_current_chat="PRICE")
                    markup.row(btn1, btn2)
                    bot.send_message(callback.message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
                else:
                    bot.send_message(callback.message.chat.id, "–ø–æ–≤—ã—Å—å—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é")

    elif callback.data == "check":
        utils.editsub(callback.message, config.channels, callback.message.chat.id)

    connection.commit()
    cursor.close()
    connection.close()


def change(message: types.Message):
    global id
    global name
    if message.text == "/cancel":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None

    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    cursor.execute(f'UPDATE items SET name = "{message.text}" WHERE id = "{id}"')
    bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    connection.commit()
    os.rename(f"photos/{message.chat.id} - {name}.png", f"photos/{message.chat.id} - {message.text}.png")
    cursor.close()
    connection.close()


def price(message: types.Message):
    global id
    if message.text == "/cancel":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    cursor.execute(f'UPDATE items SET price = "{message.text}" WHERE id = "{id}"')
    connection.commit()
    cursor.close()
    connection.close()
    bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


def delete(message: types.Message):
    global id
    if message.text == "/cancel":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    if message.text == "yes":
        cursor.execute(f'DELETE FROM items WHERE id = "{id}"')
        bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    connection.commit()
    cursor.close()
    connection.close()


def deluser(message: types.Message):
    global id
    if message.text == "/cancel":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    if message.text == "yes":
        connection.commit()
        cursor.execute(f'DELETE FROM items WHERE user_id = "{id}"')
        cursor.execute(f'DELETE FROM users WHERE tg = "{id}"')
        connection.commit()
        bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")


    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    connection.commit()
    main.start(message)
    cursor.close()
    connection.close()


def evall(message: types.Message):
    try:
        bot.send_message(message.chat.id, str(eval(message.text)))
    except Exception as e:
        bot.send_message(message.chat.id, f"–Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: \n {e}")


def execc(message: types.Message):
    try:
        exec(message.text)
    except Exception as e:
        bot.send_message(message.chat.id, f"–Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: \n {e}")


def bann(message):
    global id
    id = message.text
    bot.send_message(message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–±–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
    bot.register_next_step_handler(message, date)


def date(message: types.Message):
    global id
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    date = message.text
    try:
        d = date.split("-")
        i = int(d[0])
        if 2023 < i < 2050:
            i = int(d[1])
            if 0 < i < 12:
                i = int(d[2])
                if 0 < i < 31:
                    cursor.execute(f'UPDATE users SET banned = "1" WHERE tg = "{id}"')
                    cursor.execute(f'UPDATE users SET unban_data = "{date}" WHERE tg = "{id}"')
                    bot.send_message(id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã!")
                    bot.send_message(message.chat.id, "—É—Å–ø–µ—à–Ω–æ")
                else:
                    bot.send_message(message.chat.id, f"–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
            else:
                bot.send_message(message.chat.id, f"–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
        else:
            bot.send_message(message.chat.id, f"–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: \n {e}")


    connection.commit()
    cursor.close()
    connection.close()
